{"version":3,"sources":["components/Parser/parser.js","App.js","index.js"],"names":["Parser","useState","gamesXML","setGamesXML","gamesMap","setGamesMap","sysMsg","setSysMsg","oDOM","DOMParser","parseFromString","className","type","id","name","onChange","e","file","target","files","fileReader","FileReader","onload","result","readAsText","JSON","parse","onClick","collection","getElementsByTagName","_","each","game","index","gameCode","mobileGameCode","key","desktop","textContent","nextElementSibling","tagName","includes","map","toLowerCase","console","log","newGameCode","createElement","parentNode","insertBefore","nextSibling","mobile","oldMobileGameCode","XMLS","XMLSerializer","link","document","blob","Blob","serializeToString","setAttribute","window","URL","createObjectURL","dataset","downloadurl","download","href","join","draggable","classList","add","click","App","props","ReactDOM","render","StrictMode","getElementById"],"mappings":"wOAsJeA,EAnJA,WAAO,IAAD,EACaC,qBADb,mBACZC,EADY,KACFC,EADE,OAEaF,qBAFb,mBAEZG,EAFY,KAEFC,EAFE,OAGSJ,mBAAS,IAHlB,mBAGZK,EAHY,KAGJC,EAHI,KAMbC,GADU,IAAIC,WACCC,gBAAgBR,EAAU,mBAwG7C,OACI,mCACI,qBAAKS,UAAU,UAAf,SACI,gCACI,0DACA,6BAAKL,IACL,gCACI,8DACA,uBACIM,KAAK,OACLC,GAAG,WACHC,KAAK,eACLC,SApCH,SAACC,GAClB,IAAIC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAa,IAAIC,WAErBD,EAAWE,OAAS,SAACN,GACjBb,EAAYiB,EAAWG,QACvBhB,EAAU,cAGda,EAAWI,WAAWP,SA8BV,uBACA,kEACA,8BACI,uBACIL,KAAK,OACLC,GAAG,cACHC,KAAK,mBACLC,SAlCA,SAACC,GACrB,IAAIC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAa,IAAIC,WAErBD,EAAWE,OAAS,SAACN,GACjBX,EAAYoB,KAAKC,MAAMN,EAAWG,SAClChB,EAAU,eAGda,EAAWI,WAAWP,QA4BV,uBACA,uBACA,uBACA,4BACI,wBAAQU,QAvEJ,WA5DF,IAACC,IA6DHpB,EAAKqB,qBAAqB,QA5D1CC,IAAEC,KAAKH,GAAY,SAACI,EAAMC,EAAOL,GAC7B,IAAIM,EAAWF,EAAKH,qBAAqB,YAAY,GACjDM,EAAiBH,EAAKH,qBAAqB,kBAAkB,GAEjE,IAAK,IAAIO,KAAOhC,EAASiC,QACrB,GAAID,IAAQF,EAASI,aAAeF,IAAQhC,EAASiC,QAAQD,GAAM,CAC/D,GAA4C,mBAAxCF,EAASK,mBAAmBC,QAE5B,YADAjC,EAAU,2CAWd,GAPuBuB,IAAEW,SACrBX,IAAEY,IAAId,GAAY,SAACI,GACf,OAAOA,EAAKH,qBAAqB,YAAY,GAAGS,YAAYK,iBAEhEvC,EAASiC,QAAQD,GAAKO,eAOtB,YAHAC,QAAQC,IACJ,sBAAwBT,EAAM,IAAMhC,EAASiC,QAAQD,IAK7D,IAAIU,EAActC,EAAKuC,cAAc,kBACrCD,EAAYR,YAAclC,EAASiC,QAAQD,GAE3CF,EAASc,WAAWC,aAAaH,EAAaZ,EAASgB,aACvDN,QAAQC,IACJ,uBACAX,EAASI,YACT,UACAQ,EAAYR,aAKxB,IAAK,IAAIF,KAAOhC,EAAS+C,OACrB,GACIf,IAAQD,EAAeG,aACvBF,IAAQhC,EAAS+C,OAAOf,GAC1B,CACE,IAAIgB,EAAoBjB,EAAeG,YACvCH,EAAeG,YAAclC,EAAS+C,OAAOf,GAE7CQ,QAAQC,IACJ,qBACAO,EACA,UACAjB,EAAeG,iBAY/B,IAAMe,EAAO,IAAIC,cAEbC,EAAOC,SAAST,cAAc,KAC9BU,EAAO,IAAIC,KAAK,CAACL,EAAKM,kBAAkBnD,IAAQ,CAAEI,KAAM,aAE5D2C,EAAKK,aAAa,OAAQC,OAAOC,IAAIC,gBAAgBN,IACrDF,EAAKK,aAAa,WALH,YAMfL,EAAKS,QAAQC,YAAc,CAAC,aAAcV,EAAKW,SAAUX,EAAKY,MAAMC,KAChE,KAEJb,EAAKc,WAAY,EACjBd,EAAKe,UAAUC,IAAI,WACnBhB,EAAKiB,SAwDW,4CCjHTC,EAlBH,SAACC,GACX,OACE,qBAAK/D,UAAU,wBAAf,SACE,cAAC,EAAD,OCQNgE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASsB,eAAe,W","file":"static/js/main.06843256.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport _ from \"lodash\";\n\nconst Parser = () => {\n    let [gamesXML, setGamesXML] = useState();\n    let [gamesMap, setGamesMap] = useState();\n    let [sysMsg, setSysMsg] = useState(\"\");\n\n    let oParser = new DOMParser();\n    let oDOM = oParser.parseFromString(gamesXML, \"application/xml\");\n\n    let parseCollection = (collection) => {\n        _.each(collection, (game, index, collection) => {\n            let gameCode = game.getElementsByTagName(\"gameCode\")[0];\n            let mobileGameCode = game.getElementsByTagName(\"mobileGameCode\")[0];\n\n            for (let key in gamesMap.desktop) {\n                if (key === gameCode.textContent && key !== gamesMap.desktop[key]) {\n                    if (gameCode.nextElementSibling.tagName === \"updateGameCode\") {\n                        setSysMsg(\"Already converted, please download file\");\n                        return;\n                    }\n\n                    let isExistDuplicate = _.includes(\n                        _.map(collection, (game) => {\n                            return game.getElementsByTagName(\"gameCode\")[0].textContent.toLowerCase();\n                        }),\n                        gamesMap.desktop[key].toLowerCase()\n                    );\n\n                    if (isExistDuplicate) {\n                        console.log(\n                            \"DUPLICATE for ===> \" + key + \" \" + gamesMap.desktop[key]\n                        );\n                        return;\n                    }\n\n                    let newGameCode = oDOM.createElement(\"updateGameCode\");\n                    newGameCode.textContent = gamesMap.desktop[key];\n\n                    gameCode.parentNode.insertBefore(newGameCode, gameCode.nextSibling);\n                    console.log(\n                        \"Converted desktop:  \" +\n                        gameCode.textContent +\n                        \" ====> \" +\n                        newGameCode.textContent\n                    );\n                }\n            }\n\n            for (let key in gamesMap.mobile) {\n                if (\n                    key === mobileGameCode.textContent &&\n                    key !== gamesMap.mobile[key]\n                ) {\n                    let oldMobileGameCode = mobileGameCode.textContent;\n                    mobileGameCode.textContent = gamesMap.mobile[key];\n\n                    console.log(\n                        \"Converted mobile: \" +\n                        oldMobileGameCode +\n                        \" ====> \" +\n                        mobileGameCode.textContent\n                    );\n                }\n            }\n        });\n\n        return collection;\n    };\n\n    let dataParseDownload = () => {\n        parseCollection(oDOM.getElementsByTagName(\"game\"));\n\n        const XMLS = new XMLSerializer();\n        let filename = \"file.xml\";\n        let link = document.createElement(\"a\");\n        let blob = new Blob([XMLS.serializeToString(oDOM)], { type: \"text/xml\" });\n\n        link.setAttribute(\"href\", window.URL.createObjectURL(blob));\n        link.setAttribute(\"download\", filename);\n        link.dataset.downloadurl = [\"text/plain\", link.download, link.href].join(\n            \":\"\n        );\n        link.draggable = true;\n        link.classList.add(\"dragout\");\n        link.click();\n    };\n\n    let handleGamesXML = (e) => {\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n\n        fileReader.onload = (e) => {\n            setGamesXML(fileReader.result);\n            setSysMsg(\"XML added\");\n        };\n\n        fileReader.readAsText(file);\n    };\n\n    let handleMappingFile = (e) => {\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n\n        fileReader.onload = (e) => {\n            setGamesMap(JSON.parse(fileReader.result));\n            setSysMsg(\"JSON added\");\n        };\n\n        fileReader.readAsText(file);\n    };\n\n    return (\n        <>\n            <div className=\"wrapper\">\n                <div>\n                    <h1>Games Code Mapping hello</h1>\n                    <h2>{sysMsg}</h2>\n                    <div>\n                        <h4>Please choose games xml file</h4>\n                        <input\n                            type=\"file\"\n                            id=\"gamesXML\"\n                            name=\"filename_xml\"\n                            onChange={handleGamesXML}\n                        />\n                    </div>\n                    <br />\n                    <h4>Please choose games mapping file</h4>\n                    <div>\n                        <input\n                            type=\"file\"\n                            id=\"mappingFile\"\n                            name=\"filename_mapping\"\n                            onChange={handleMappingFile}\n                        />\n                    </div>\n                    <br />\n                    <hr />\n                    <br />\n                    <p>\n                        <button onClick={dataParseDownload}>Convert and Download</button>\n                    </p>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Parser;\n","import './App.css';\n// import ButtonsField from './components/Buttons/Buttons';\n// import Dialogs from './components/Dialogs/dialogs';\n// import Header from './components/Header/header'\n// import Navbar from './components/Navbar/navbar'\n// import Pokes from './components/Pokes/pokes';\nimport Parser from './components/Parser/parser';\n// import 'bootstrap/dist/css/bootstrap.min.css'\n// import TableMain from './components/Table/Table';\n// import Timer from './components/Timer/timer'\n\nconst App = (props) => {\n  return (\n    <div className=\"app-wrapper container\">\n      <Parser />\n\n      {/* <Header />\n        <Navbar />\n        <div className='app-wrapper-content'>\n            <Dialogs message={props.state.message}/>\n        </div>\n        <Pokes pokemons={props.state.pokemons}/>\n        <ButtonsField dispatch={props.dispatch}/> */}\n      {/* <TableMain /> */}\n      {/* <Timer /> */}\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import store from './redux/store'\n\n//let renderEntireTree = (state) => {    \n    // ReactDOM.render(\n    //   <React.StrictMode>\n    //     <App state={state}\n    //         dispatch={store.dispatch.bind(store)}/>\n    //   </React.StrictMode>,\n    //   document.getElementById('root')\n    // )\n    //  ReactDOM.render(\n    //   <React.StrictMode>\n    //     <App/>\n    //   </React.StrictMode>,\n    //   document.getElementById('root')\n    // )\n//}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// renderEntireTree(store.getState());\n\n// store.subscribe(renderEntireTree);"],"sourceRoot":""}