{"version":3,"sources":["components/Parser/parser.js","App.js","index.js"],"names":["Parser","useState","gamesXML","setGamesXML","gamesMap","setGamesMap","sysMsg","setSysMsg","oDOM","DOMParser","parseFromString","className","type","id","name","onChange","e","file","target","files","fileReader","FileReader","onload","result","readAsText","JSON","parse","onClick","collection","getElementsByTagName","_","each","game","index","gameCode","mobileGameCode","property","desktop","textContent","nextElementSibling","tagName","includes","map","console","log","newGameCode","createElement","parentNode","insertBefore","nextSibling","mobile","oldMobileGameCode","XMLS","XMLSerializer","link","document","blob","Blob","serializeToString","setAttribute","window","URL","createObjectURL","dataset","downloadurl","download","href","join","draggable","classList","add","click","App","props","ReactDOM","render","StrictMode","getElementById"],"mappings":"wOAqJeA,EAlJA,WAAO,IAAD,EACWC,qBADX,mBACdC,EADc,KACJC,EADI,OAEWF,qBAFX,mBAEdG,EAFc,KAEJC,EAFI,OAGOJ,mBAAS,IAHhB,mBAGdK,EAHc,KAGNC,EAHM,KAMfC,GADU,IAAIC,WACCC,gBAAgBR,EAAU,mBAuG7C,OACE,mCACE,qBAAKS,UAAU,UAAf,SACE,gCACE,0DACA,6BAAKL,IACL,gCACE,8DACA,uBACEM,KAAK,OACLC,GAAG,WACHC,KAAK,eACLC,SApCS,SAACC,GACpB,IAAIC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAa,IAAIC,WAErBD,EAAWE,OAAS,SAACN,GACnBb,EAAYiB,EAAWG,QACvBhB,EAAU,cAGZa,EAAWI,WAAWP,SA8BhB,uBACA,kEACA,8BACE,uBACEL,KAAK,OACLC,GAAG,cACHC,KAAK,mBACLC,SAlCY,SAACC,GACvB,IAAIC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAa,IAAIC,WAErBD,EAAWE,OAAS,SAACN,GACnBX,EAAYoB,KAAKC,MAAMN,EAAWG,SAClChB,EAAU,eAGZa,EAAWI,WAAWP,QA4BhB,uBACA,uBACA,uBACA,4BACE,wBAAQU,QAvEM,WA3DF,IAACC,IA4DLpB,EAAKqB,qBAAqB,QA3DtCC,IAAEC,KAAKH,GAAY,SAACI,EAAMC,EAAOL,GAC7B,IAAIM,EAAWF,EAAKH,qBAAqB,YAAY,GACjDM,EAAiBH,EAAKH,qBAAqB,kBAAkB,GAErE,IAAK,IAAIO,KAAYhC,EAASiC,QAC1B,GACAD,IAAaF,EAASI,aACtBF,IAAahC,EAASiC,QAAQD,GAC5B,CAEF,GAA4C,mBAAxCF,EAASK,mBAAmBC,QAE5B,YADAjC,EAAU,2CAQd,GAJuBuB,IAAEW,SAASX,IAAEY,IAAId,GAAY,SAAAI,GAChD,OAAOA,EAAKH,qBAAqB,YAAY,GAAGS,eAChDlC,EAASiC,QAAQD,IAIjB,YADAO,QAAQC,IAAI,sBAAwBR,EAAW,IAAMhC,EAASiC,QAAQD,IAI1E,IAAIS,EAAcrC,EAAKsC,cAAc,kBACrCD,EAAYP,YAAclC,EAASiC,QAAQD,GAE3CF,EAASa,WAAWC,aAAaH,EAAaX,EAASe,aACvDN,QAAQC,IACR,uBACIV,EAASI,YACT,UACAO,EAAYP,aAKtB,IAAK,IAAIF,KAAYhC,EAAS8C,OAC5B,GACEd,IAAaD,EAAeG,aAC5BF,IAAahC,EAAS8C,OAAOd,GAC7B,CACA,IAAIe,EAAoBhB,EAAeG,YACvCH,EAAeG,YAAclC,EAAS8C,OAAOd,GAE7CO,QAAQC,IACN,qBACEO,EACA,UACAhB,EAAeG,iBAYzB,IAAMc,EAAO,IAAIC,cAEbC,EAAOC,SAAST,cAAc,KAC9BU,EAAO,IAAIC,KAAK,CAACL,EAAKM,kBAAkBlD,IAAQ,CAAEI,KAAM,aAE5D0C,EAAKK,aAAa,OAAQC,OAAOC,IAAIC,gBAAgBN,IACrDF,EAAKK,aAAa,WALH,YAMfL,EAAKS,QAAQC,YAAc,CAAC,aAAcV,EAAKW,SAAUX,EAAKY,MAAMC,KAClE,KAEFb,EAAKc,WAAY,EACjBd,EAAKe,UAAUC,IAAI,WACnBhB,EAAKiB,SAwDG,4CChHGC,EAlBH,SAACC,GACX,OACE,qBAAK9D,UAAU,wBAAf,SACE,cAAC,EAAD,OCQN+D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASsB,eAAe,W","file":"static/js/main.f60a6c3a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport _ from \"lodash\";\n\nconst Parser = () => {\n  let [gamesXML, setGamesXML] = useState();\n  let [gamesMap, setGamesMap] = useState();\n  let [sysMsg, setSysMsg] = useState(\"\");\n\n  let oParser = new DOMParser();\n  let oDOM = oParser.parseFromString(gamesXML, \"application/xml\");\n\n  let parseCollection = (collection) => {\n        _.each(collection, (game, index, collection) => {\n            let gameCode = game.getElementsByTagName(\"gameCode\")[0];\n            let mobileGameCode = game.getElementsByTagName(\"mobileGameCode\")[0];\n\n        for (let property in gamesMap.desktop) {\n            if (\n            property === gameCode.textContent &&\n            property !== gamesMap.desktop[property]\n            ) {\n\n            if (gameCode.nextElementSibling.tagName === \"updateGameCode\") {\n                setSysMsg(\"Already converted, please download file\");\n                return;\n            }\n\n            let isExistDuplicate = _.includes(_.map(collection, game => {\n                return game.getElementsByTagName(\"gameCode\")[0].textContent\n            }), gamesMap.desktop[property]);\n\n            if (isExistDuplicate) {\n                console.log('DUPLICATE for ===> ' + property + ' ' + gamesMap.desktop[property]);\n                return;\n            }\n\n            let newGameCode = oDOM.createElement(\"updateGameCode\");\n            newGameCode.textContent = gamesMap.desktop[property];\n\n            gameCode.parentNode.insertBefore(newGameCode, gameCode.nextSibling);\n            console.log(\n            \"Converted desktop:  \" +\n                gameCode.textContent +\n                \" ====> \" +\n                newGameCode.textContent\n            );\n        }\n    }\n\n      for (let property in gamesMap.mobile) {\n        if (\n          property === mobileGameCode.textContent &&\n          property !== gamesMap.mobile[property]\n        ) {\n          let oldMobileGameCode = mobileGameCode.textContent;\n          mobileGameCode.textContent = gamesMap.mobile[property];\n\n          console.log(\n            \"Converted mobile: \" +\n              oldMobileGameCode +\n              \" ====> \" +\n              mobileGameCode.textContent\n          );\n        }\n      }\n    });\n\n    return collection;\n  };\n\n  let dataParseDownload = () => {\n    parseCollection(oDOM.getElementsByTagName(\"game\"));\n\n    const XMLS = new XMLSerializer();\n    let filename = \"file.xml\";\n    let link = document.createElement(\"a\");\n    let blob = new Blob([XMLS.serializeToString(oDOM)], { type: \"text/xml\" });\n\n    link.setAttribute(\"href\", window.URL.createObjectURL(blob));\n    link.setAttribute(\"download\", filename);\n    link.dataset.downloadurl = [\"text/plain\", link.download, link.href].join(\n      \":\"\n    );\n    link.draggable = true;\n    link.classList.add(\"dragout\");\n    link.click();\n  };\n\n  let handleGamesXML = (e) => {\n    let file = e.target.files[0];\n    let fileReader = new FileReader();\n\n    fileReader.onload = (e) => {\n      setGamesXML(fileReader.result);\n      setSysMsg(\"XML added\");\n    };\n\n    fileReader.readAsText(file);\n  };\n\n  let handleMappingFile = (e) => {\n    let file = e.target.files[0];\n    let fileReader = new FileReader();\n\n    fileReader.onload = (e) => {\n      setGamesMap(JSON.parse(fileReader.result));\n      setSysMsg(\"JSON added\");\n    };\n\n    fileReader.readAsText(file);\n  };\n\n  return (\n    <>\n      <div className=\"wrapper\">\n        <div>\n          <h1>Games Code Mapping hello</h1>\n          <h2>{sysMsg}</h2>\n          <div>\n            <h4>Please choose games xml file</h4>\n            <input\n              type=\"file\"\n              id=\"gamesXML\"\n              name=\"filename_xml\"\n              onChange={handleGamesXML}\n            />\n          </div>\n          <br />\n          <h4>Please choose games mapping file</h4>\n          <div>\n            <input\n              type=\"file\"\n              id=\"mappingFile\"\n              name=\"filename_mapping\"\n              onChange={handleMappingFile}\n            />\n          </div>\n          <br />\n          <hr />\n          <br />\n          <p>\n            <button onClick={dataParseDownload}>Convert and Download</button>\n          </p>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Parser;\n","import './App.css';\n// import ButtonsField from './components/Buttons/Buttons';\n// import Dialogs from './components/Dialogs/dialogs';\n// import Header from './components/Header/header'\n// import Navbar from './components/Navbar/navbar'\n// import Pokes from './components/Pokes/pokes';\nimport Parser from './components/Parser/parser';\n// import 'bootstrap/dist/css/bootstrap.min.css'\n// import TableMain from './components/Table/Table';\n// import Timer from './components/Timer/timer'\n\nconst App = (props) => {\n  return (\n    <div className=\"app-wrapper container\">\n      <Parser />\n\n      {/* <Header />\n        <Navbar />\n        <div className='app-wrapper-content'>\n            <Dialogs message={props.state.message}/>\n        </div>\n        <Pokes pokemons={props.state.pokemons}/>\n        <ButtonsField dispatch={props.dispatch}/> */}\n      {/* <TableMain /> */}\n      {/* <Timer /> */}\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import store from './redux/store'\n\n//let renderEntireTree = (state) => {    \n    // ReactDOM.render(\n    //   <React.StrictMode>\n    //     <App state={state}\n    //         dispatch={store.dispatch.bind(store)}/>\n    //   </React.StrictMode>,\n    //   document.getElementById('root')\n    // )\n    //  ReactDOM.render(\n    //   <React.StrictMode>\n    //     <App/>\n    //   </React.StrictMode>,\n    //   document.getElementById('root')\n    // )\n//}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// renderEntireTree(store.getState());\n\n// store.subscribe(renderEntireTree);"],"sourceRoot":""}